package svcclient;

import java.awt.Toolkit;
import java.sql.SQLException;
import java.util.Iterator;
import java.util.List;
import javax.swing.JOptionPane;
import static svcclient.SvcClient.allCustomers;
import static svcclient.SvcClient.allProducts;
import ws.customers.Customer;
import ws.customers.CustomerService;
import ws.customers.CustomerService_Service;
import ws.products.Product;
import ws.products.ProductServices;
import ws.products.ProductServices_Service;

/**
 * swe400 IP5 GUI client for JAX-WS CRUD application
 * @author jsimmonds
 * 
 * version 0.0.3
 */
public class SvcClientGUI extends javax.swing.JFrame {
    
    private static String objectIs; // use this for if/else blocks determining product or customer inside button handlers
    private static int ciD; // new customer id
    private static int piD; // new product id
    private static List< Customer > crange;
    private static List< Product > prange; 
    private static int c1iD;
    private static int c2iD;
    private static int p1iD;
    private static int p2iD;
    private static Float prc;
    
    /**
     * Creates new form SvcClientGUI
     */
    public SvcClientGUI() {
        initComponents();
        
        label1.setText( "Customer ID:" ); // textfield labels set by initially
        label2.setText( "Name:" );
        label3.setText( "Login:" );
        label4.setText( "Password:" );
        label5.setText( "Range 2" );
        
        //setIcon(); // see the method just below main at the bottom of the class
        this.setLocationRelativeTo( null ); // center the GUI in the display monitor
    }

    private void setIcon() {
        
        // this bit of wizardry brought to you by anhpnh2801 on YouTube: https://www.youtube.com/watch?v=40ikcEonWng
        setIconImage( Toolkit.getDefaultToolkit().getImage( 
            getClass().getResource( "ringsAvatar32x32trans.png" ) ) );
    }
   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        chooseCust = new javax.swing.JButton();
        chooseProd = new javax.swing.JButton();
        title = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        display = new javax.swing.JTextArea();
        label1 = new javax.swing.JLabel();
        label2 = new javax.swing.JLabel();
        label3 = new javax.swing.JLabel();
        label4 = new javax.swing.JLabel();
        input1 = new javax.swing.JTextField();
        input2 = new javax.swing.JTextField();
        input3 = new javax.swing.JTextField();
        input4 = new javax.swing.JTextField();
        label5 = new javax.swing.JLabel();
        range2 = new javax.swing.JTextField();
        find = new javax.swing.JButton();
        findAll = new javax.swing.JButton();
        findRange = new javax.swing.JButton();
        create = new javax.swing.JButton();
        update = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        closeApp = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("JAX-WS Client");

        chooseCust.setText("Customers");
        chooseCust.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseCustActionPerformed(evt);
            }
        });

        chooseProd.setText("Products");
        chooseProd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseProdActionPerformed(evt);
            }
        });

        title.setText("Distributed Web Service Client");

        display.setColumns(20);
        display.setRows(5);
        jScrollPane1.setViewportView(display);

        label1.setText("Custonmer ID:");

        label2.setText("Name:");

        label3.setText("Login:");

        label4.setText("Password:");

        label5.setText("Range 2:");

        find.setText("Find by ID");
        find.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findActionPerformed(evt);
            }
        });

        findAll.setText("Find All");
        findAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findAllActionPerformed(evt);
            }
        });

        findRange.setText("Range");
        findRange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findRangeActionPerformed(evt);
            }
        });

        create.setText("Create");
        create.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createActionPerformed(evt);
            }
        });

        update.setText("Update");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        closeApp.setText("EXIT");
        closeApp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeAppActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(input2, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(label4, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(input4, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(input1, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(label5))
                            .addComponent(input3, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(17, 17, 17)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(range2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 64, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(findRange, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(findAll, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(update))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(find)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(create, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(71, 71, 71))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(closeApp, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(101, 101, 101))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(title)
                .addGap(206, 206, 206))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(206, 206, 206)
                        .addComponent(chooseCust)
                        .addGap(18, 18, 18)
                        .addComponent(chooseProd))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 453, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(62, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(title)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chooseProd)
                    .addComponent(chooseCust))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label1)
                    .addComponent(input1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label5)
                    .addComponent(range2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(create)
                    .addComponent(find))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(input2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label2)
                    .addComponent(findAll)
                    .addComponent(update))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(input3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label3)
                    .addComponent(delete)
                    .addComponent(findRange))
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(input4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label4)
                    .addComponent(closeApp))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void closeAppActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeAppActionPerformed
        System.exit( 0 );
    }//GEN-LAST:event_closeAppActionPerformed
    
    private void chooseCustActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseCustActionPerformed
        
        label1.setText( "Customer ID:" ); // labels set by "Customer" button pressed
        label2.setText( "Name:" );
        label3.setText( "Login:" );
        label4.setText( "Password:" );
        label5.setText( "Range 2" );
        
        display.setText( "" );
        input1.setText( "" ); // clear the textarea
        input2.setText( "" );
        input3.setText( "" );
        input4.setText( "" );
        range2.setText( "" );
                    
        objectIs = "custs"; // set a flag for use in handlers
    }//GEN-LAST:event_chooseCustActionPerformed

    private void chooseProdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseProdActionPerformed
        
        label1.setText( "Product ID:" ); // labels set by "Product" button pressed
        label2.setText( "Name:" );
        label3.setText( "Description:" );
        label4.setText( "Price:" );
        label5.setText( "Range 2" );
        
        display.setText( "" ); // clear the textarea and all textfields
        input1.setText( "" ); 
        input2.setText( "" );
        input3.setText( "" );
        input4.setText( "" );
        range2.setText( "" );
        
        objectIs = "prods"; // set a flag for use in handlers
    }//GEN-LAST:event_chooseProdActionPerformed

    private void findActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findActionPerformed
        display.setText( "" ); // clear the text area before adding new list 
        
        switch( objectIs ) {
            
            case "prods": 
                
                piD = Integer.parseInt( input1.getText() );                
            
            try {
                ProductServices ps = new ProductServices_Service().getProductServicesPort();
        
                Product prd = ps.find( piD ); // find the product in the object array, by id   
        
                int prID = prd.getId(); // assign the object values, just to keep the output string readable            
                String nm = prd.getName();
                String dsc = prd.getDescription();
                float pric = prd.getPrice();            
                
                // format output
                String pConsole = String.format( 
                    "Products\nID\tName\t Description\t\tPrice\n%-10d\t"
                    + "%-20s %-32s\t$ %,10.2f\n", prID, nm, dsc, pric );
                display.setText( pConsole );
            
            } catch ( NumberFormatException nfExcept ) {
                
                System.out.println( nfExcept.toString() );
                display.append( 
                    "Please enter an existing ID number and try again" );             
            }             
            break;
        
            case "custs": 
                
                ciD = Integer.parseInt( input1.getText() );
                
            try {
                CustomerService nc = new CustomerService_Service().getCustomerServicePort(); 
        
                Customer cst = nc.find( ciD ); // find the customer in the object array, by id
        
                int crID = cst.getId(); // assign the object values, just to keep the output string readable            
                String nm = cst.getName();
                String lgn = cst.getLogin();
                String pw = cst.getPassword();
                
                String cConsole = String.format( // print out the object formatted  for columns
                    "Customers\nID\tName\tLogin\tPassword\n%-10d\t"
                    + "%-20s\t%-10s\t%-15s\n", crID, nm, lgn, pw );
                display.setText( cConsole );                
            } catch ( NumberFormatException nfExcept ) {
                
                System.out.println( nfExcept.toString() );
                display.append( 
                    "Please enter an existing ID number and try again" );             
            }      
            break;
                
            default:
                JOptionPane.showMessageDialog(
                    null, "Please fill in an ID to Find." );
            
        } // end switch for find products or customers  
        
        input1.setText( "" );
        input2.setText( "" );
        input3.setText( "" );
        input4.setText( "" );
        range2.setText( "" );
        
    }//GEN-LAST:event_findActionPerformed

    private void findAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findAllActionPerformed
                
        input1.setText( "" ); // clear the textarea before displaying new find all results
        input2.setText( "" );
        input3.setText( "" );
        input4.setText( "" );
        range2.setText( "" );
        
        switch( objectIs ) {
            
            case "custs": {
                
                display.setText( "" ); // clear the textarea before reading in table
                // connecting to service on localhost (could be any URL with the Web Service deployed)        
                CustomerService cs = new CustomerService_Service().getCustomerServicePort();

                // header for Customer table
                display.setText( "Customers\nID\tName\tLogin\tPassword\n\n" );
                for( Customer cst : cs.findAll() ) { // prints a table of all customers in the database table

                    // could just use the field calls in the output string, but this makes a formatted string easier to read 
                    int crID = cst.getId();
                    String nm = cst.getName();
                    String lgn = cst.getLogin();
                    String pw = cst.getPassword();

                    // format output into a table
                    String cConsole = String.format(
                        "%-10d\t%-20s\t%-10s\t%-15s", crID, nm, lgn, pw );
                    display.append( cConsole );
                    display.append("\n"); // line space 
                }                    
            }
            break;
                
            case "prods": {
                
                display.setText( "" ); // clear the textarea before reading in table
                // connecting to service on localhost (could be any URL with the Web Service deployed)
                ProductServices ps = new ProductServices_Service().getProductServicesPort(); 

                // header for Product table
                display.setText( "Products\nID\tName\tDescription\t\tPrice\n\n" );
                for( Product prod : ps.findAll() ) { //  the findAll() initiates a SOAP data transfer     
                    
                    int pID = prod.getId();
                    String nam = prod.getName();
                    String desc = prod.getDescription();
                    float pric = prod.getPrice();

                    // format output into a table
                    String pConsole = String.format(                        
                        "%-10d\t%-24s%-32s$ %,10.2f", pID, nam, desc, pric );
                    display.append( pConsole );
                    display.append("\n"); // line space
                }                    
            }
            break;
                
            default:
                display.append( "error reading in database table" );
                
        }        
    }//GEN-LAST:event_findAllActionPerformed

    private void findRangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findRangeActionPerformed
        
        switch( objectIs ) {
            
            case "custs": {
                
                display.setText( "" ); // clear the textarea before reading in table
                c1iD = Integer.parseInt( input1.getText() );
                c2iD = Integer.parseInt( range2.getText() );
                
                CustomerService nc = new CustomerService_Service().getCustomerServicePort(); 
                
                // create a sublist of customers from index c1iD to c2iD
                crange = nc.findAll().subList( c1iD - 1, c2iD );
        
                // print out a header for the customer table output
                display.setText( "Customers\nID\tName\tLogin\tPassword\n\n" );
        
                // iterate over the sublist of customer objects: crange, and print them out 
                for ( Iterator< Customer > it = crange.iterator(); it.hasNext(); ) {
            
                Customer ct = it.next(); // assign the next customer object
            
                int crID = ct.getId(); // assign the object values, just to keep the output string readable            
                String nm = ct.getName();
                String lgn = ct.getLogin();
                String pw = ct.getPassword();
            
                String cConsole = String.format( // print out the object formatted  for columns
                    "%-10d\t%-20s\t%-10s\t%-15s\n", crID, nm, lgn, pw );
                display.append( cConsole );
                }
                display.append( "\n" );
                crange.clear(); // clear the List so it doesn't get extended every time the method is run
            }
            break;
            
            case "prods": {
                
                display.setText( "" ); // clear the textarea before reading in table
                p1iD = Integer.parseInt( input1.getText() );
                p2iD = Integer.parseInt( range2.getText() );
                
                ProductServices ps = new ProductServices_Service().getProductServicesPort();       
                
                // create a sublist of products from index p1iD to p2iD
                prange = ps.findAll().subList( p1iD - 1, p2iD );
        
                // print out a header for the product table output
                display.setText( 
                    "Products\nID\t\tName\tDescription\tPrice\n\n" );
        
                // iterate over the sublist of product objects: crange and print them out 
                for ( Iterator< Product > it = prange.iterator(); it.hasNext(); ) {
            
                    Product prd = it.next(); // assign the next customer object

                    int prID = prd.getId(); // assign the object values, just to keep the output string readable            
                    String nm = prd.getName();
                    String dsc = prd.getDescription();
                    float pric = prd.getPrice();

                    // format output into a table
                    String pConsole = String.format( 
                        "%-10d\t%-24s%-32s$ %,10.2f\n", prID, nm, dsc, pric );
                    display.append( pConsole );
                }
        
                display.append( "\n" );
                prange.clear(); // clear the List so it doesn't get extended every time the method is run
            }
            break;
            
            default:
                display.append( "Error reading range.");
        }
                
        input1.setText( "" ); // clear the textarea before displaying new find all results
        input2.setText( "" );
        input3.setText( "" );
        input4.setText( "" );
        range2.setText( "" );        
    }//GEN-LAST:event_findRangeActionPerformed

    private void createActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createActionPerformed
        
        display.setText( "" ); // clear the textarea before reading in table       
         
        switch( objectIs ) {
            
            case "custs": {
                
                ciD = Integer.parseInt( input1.getText() );
                String cnme = input2.getText();
                String clgin = input3.getText();
                String cssWrd = input4.getText();
                range2.setText( "" );
                
                CustomerService nc = new 
                    CustomerService_Service().getCustomerServicePort();
        
                Customer cst = new Customer(); // create a customer object for assigning values       

                cst.setId( ciD ); // assign the values for the customer
                cst.setLogin( clgin );
                cst.setName( cnme );
                cst.setPassword( cssWrd );

                nc.create( cst ); // use the web service to create a new customer 
                display.append( "\n" );                
            }
            break;
            
            case "prods": {
                
                piD = Integer.parseInt( input1.getText() );
                String pnme = input2.getText();
                String pdesc = input3.getText();
                Float prc = Float.parseFloat( input4.getText() );                
                
                ProductServices ps = new ProductServices_Service().getProductServicesPort();
        
                Product prod = new Product();
                prod.setId( piD );        
                prod.setName( pnme );
                prod.setDescription( pdesc );
                prod.setPrice( prc );
        
                ps.create( prod ); 
        
                //allProducts();
                display.append( "\n" );
            }
            break;
            
            default:
                display.setText( "Failed to create new object." );
        } // end switch
                
        input1.setText( "" ); // clear the textarea before displaying new find all results
        input2.setText( "" );
        input3.setText( "" );
        input4.setText( "" );
        range2.setText( "" );  
    }//GEN-LAST:event_createActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        
        switch( objectIs ) {
            
            case "custs": {
                
                ciD = Integer.parseInt( input1.getText() );
                String cnme = input2.getText();
                String clgin = input3.getText();
                String cssWrd = input4.getText();
                range2.setText( "" );
                
                CustomerService nc = new CustomerService_Service().getCustomerServicePort();
        
                Customer cst = nc.find( ciD ); // find the customer in the object array, by id   
        
                // if the user doesn't change a value, use the current value 
                if( cnme.equals( "" ) )
                    cnme = cst.getName();

                if( clgin.equals( "" ) )
                    clgin = cst.getLogin();

                if( cssWrd.equals( "" ) ) 
                    cssWrd = cst.getPassword();      

                cst.setId( ciD ); // assign the values of an existing customer        
                cst.setName( cnme );
                cst.setLogin( clgin );        
                cst.setPassword( cssWrd );

                nc.edit( cst ); // use the web service to update the customer in the database        
            }
            break;
            
            case "prods": {                
                
                piD = Integer.parseInt( input1.getText() );
                String pnme = input2.getText();
                String pdesc = input3.getText();
                 
                range2.setText( "" );
                
                ProductServices ps = new 
                    ProductServices_Service().getProductServicesPort();
        
                Product prd = ps.find( piD ); // find the customer in the object array, by id   

                // if the user hits enter without inputting a value, use the current, stored value 
                if( pnme.equals( "" ) )
                    pnme = prd.getName();

                if( pdesc.equals( "" ) )
                    pdesc = prd.getDescription();        

                if( input4.getText().equals( "" ) )
                    prc = prd.getPrice();      
                else
                    prc = Float.parseFloat( input4.getText() );        

                prd.setId( piD ); // assign the values of an existing product
                prd.setDescription( pdesc );
                prd.setName( pnme );
                prd.setPrice( prc );

                ps.edit( prd ); // use the web service to update the product in the database 
            }
            break;
            
            default:
                display.setText( "Failed to create new object." );
        } // end switch
                
        input1.setText( "" ); // clear the textarea before displaying new find all results
        input2.setText( "" );
        input3.setText( "" );
        input4.setText( "" );
        range2.setText( "" );  
    }//GEN-LAST:event_updateActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        
        switch( objectIs ) {
            
            case "custs": {
                
                ciD = Integer.parseInt( input1.getText() );
                
                CustomerService nc = new CustomerService_Service().getCustomerServicePort();        
        
                Customer cst = nc.find( ciD ); // find the customer in the object array, by id
        
                nc.remove( cst ); // delete the customer from the table         
            }
            break;
            
            case "prods": {
                
                piD = Integer.parseInt( input1.getText() );
                
                ProductServices ps = new ProductServices_Service().getProductServicesPort();           
        
                Product prd = ps.find( piD ); // find the product in the object array, by id       
        
                ps.remove( prd ); // delete the customer from the table           
            }
            break;
            
            default:
                display.setText( "Failed to delete object." );
        } // end switch
                
        input1.setText( "" ); // clear the textarea before displaying new find all results
        input2.setText( "" );
        input3.setText( "" );
        input4.setText( "" );
        range2.setText( "" );  
    }//GEN-LAST:event_deleteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SvcClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SvcClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SvcClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SvcClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                
                new SvcClientGUI().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton chooseCust;
    private javax.swing.JButton chooseProd;
    private javax.swing.JButton closeApp;
    private javax.swing.JButton create;
    private javax.swing.JButton delete;
    private javax.swing.JTextArea display;
    private javax.swing.JButton find;
    private javax.swing.JButton findAll;
    private javax.swing.JButton findRange;
    private javax.swing.JTextField input1;
    private javax.swing.JTextField input2;
    private javax.swing.JTextField input3;
    private javax.swing.JTextField input4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel label1;
    private javax.swing.JLabel label2;
    private javax.swing.JLabel label3;
    private javax.swing.JLabel label4;
    private javax.swing.JLabel label5;
    private javax.swing.JTextField range2;
    private javax.swing.JLabel title;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables
}
