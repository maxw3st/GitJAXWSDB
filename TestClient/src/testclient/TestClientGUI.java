package testclient;

/**
 * @author jsimmonds
 * 
 * CS459 Software Testing 2/2015
 * Instructor: Tony Lowe
 * 
 * week 5 CRUD application with SOAP based messaging
 * This is the client application created for the server side application TestDemo
 * The GUI client will be used as the test model for the course
 * v0.0.3
 */

import java.awt.Toolkit;
import java.util.Iterator;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import ws.customers.Customer;
import ws.customers.CustomerService;
import ws.customers.CustomerService_Service;
import ws.products.Product;
import ws.products.ProductServices;
import ws.products.ProductServices_Service;

public class TestClientGUI extends javax.swing.JFrame {
    
    private static String objectIs; // use this for if/else blocks determining product or customer inside button handlers
    private static int ciD; // new customer id
    private static int piD; // new product id
    private static List< Customer > crange;
    private static List< Product > prange; 
    private static int c1iD;
    private static int c2iD;
    private static int p1iD;
    private static int p2iD;
    private static Float prc;
    
    /**
     * Creates new form SvcClientGUI
     */
    public TestClientGUI() {
        
        initComponents();        
        this.setLocationRelativeTo( null ); // center the GUI in the display monitor
        
        //setIcon(); // set in palette properties using code from setIcon method below        
    }

    //private void setIcon() {
        
        // this bit of wizardry brought to you by anhpnh2801 on YouTube: https://www.youtube.com/watch?v=40ikcEonWng
        //setIconImage( Toolkit.getDefaultToolkit().getImage( 
        //    getClass().getResource( "ringsAvatar32x32trans.png" ) ) );
    //} // end setIcon method // this method is implemented within palette properties
   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        chooseCust = new javax.swing.JButton();
        chooseProd = new javax.swing.JButton();
        title = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        display = new javax.swing.JTextArea();
        label1 = new javax.swing.JLabel();
        label2 = new javax.swing.JLabel();
        label3 = new javax.swing.JLabel();
        label4 = new javax.swing.JLabel();
        input1 = new javax.swing.JTextField();
        input2 = new javax.swing.JTextField();
        input3 = new javax.swing.JTextField();
        input4 = new javax.swing.JTextField();
        label5 = new javax.swing.JLabel();
        range2 = new javax.swing.JTextField();
        find = new javax.swing.JButton();
        findAll = new javax.swing.JButton();
        findRange = new javax.swing.JButton();
        create = new javax.swing.JButton();
        update = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        closeApp = new javax.swing.JButton();
        cnt = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("JAX-WS Client");
        setIconImage(Toolkit.getDefaultToolkit().getImage( 
            getClass().getResource( "ringsAvatar32x32trans.png" ) ) );
    setResizable(false);

    chooseCust.setText("Customers");
    chooseCust.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            chooseCustActionPerformed(evt);
        }
    });

    chooseProd.setText("Products");
    chooseProd.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            chooseProdActionPerformed(evt);
        }
    });

    title.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
    title.setText("Distributed Web Service Client");

    display.setColumns(42);
    display.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
    display.setRows(5);
    jScrollPane1.setViewportView(display);

    label1.setText("Customer ID:");
    label1.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

    label2.setText("Name:");
    label2.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
    label2.setMaximumSize(new java.awt.Dimension(64, 14));
    label2.setMinimumSize(new java.awt.Dimension(64, 14));
    label2.setPreferredSize(new java.awt.Dimension(64, 14));

    label3.setText("Login:");
    label3.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
    label3.setMaximumSize(new java.awt.Dimension(64, 14));
    label3.setMinimumSize(new java.awt.Dimension(64, 14));
    label3.setPreferredSize(new java.awt.Dimension(64, 14));

    label4.setText("Password:  ");
    label4.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
    label4.setMaximumSize(new java.awt.Dimension(64, 14));
    label4.setMinimumSize(new java.awt.Dimension(64, 14));
    label4.setPreferredSize(new java.awt.Dimension(64, 14));

    input3.setMinimumSize(new java.awt.Dimension(14, 20));
    input3.setPreferredSize(new java.awt.Dimension(14, 20));

    input4.setMinimumSize(new java.awt.Dimension(14, 20));
    input4.setPreferredSize(new java.awt.Dimension(14, 20));

    label5.setText("Range 2:");

    find.setText("Find by ID");
    find.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            findActionPerformed(evt);
        }
    });

    findAll.setText("Find All");
    findAll.setMaximumSize(new java.awt.Dimension(81, 23));
    findAll.setMinimumSize(new java.awt.Dimension(81, 23));
    findAll.setPreferredSize(new java.awt.Dimension(81, 23));
    findAll.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            findAllActionPerformed(evt);
        }
    });

    findRange.setText("Range");
    findRange.setMaximumSize(new java.awt.Dimension(81, 23));
    findRange.setMinimumSize(new java.awt.Dimension(81, 23));
    findRange.setPreferredSize(new java.awt.Dimension(81, 23));
    findRange.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            findRangeActionPerformed(evt);
        }
    });

    create.setText("Create");
    create.setMaximumSize(new java.awt.Dimension(81, 23));
    create.setMinimumSize(new java.awt.Dimension(81, 23));
    create.setPreferredSize(new java.awt.Dimension(81, 23));
    create.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            createActionPerformed(evt);
        }
    });

    update.setText("Update");
    update.setMaximumSize(new java.awt.Dimension(81, 23));
    update.setMinimumSize(new java.awt.Dimension(81, 23));
    update.setPreferredSize(new java.awt.Dimension(81, 23));
    update.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            updateActionPerformed(evt);
        }
    });

    delete.setText("Delete");
    delete.setMaximumSize(new java.awt.Dimension(81, 23));
    delete.setMinimumSize(new java.awt.Dimension(81, 23));
    delete.setPreferredSize(new java.awt.Dimension(81, 23));
    delete.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            deleteActionPerformed(evt);
        }
    });

    closeApp.setText("EXIT");
    closeApp.setMaximumSize(new java.awt.Dimension(81, 23));
    closeApp.setMinimumSize(new java.awt.Dimension(81, 23));
    closeApp.setPreferredSize(new java.awt.Dimension(81, 23));
    closeApp.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            closeAppActionPerformed(evt);
        }
    });

    cnt.setText("Count");
    cnt.setMaximumSize(new java.awt.Dimension(81, 23));
    cnt.setMinimumSize(new java.awt.Dimension(81, 23));
    cnt.setPreferredSize(new java.awt.Dimension(81, 23));
    cnt.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            cntActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addGap(0, 0, Short.MAX_VALUE)
            .addComponent(title)
            .addGap(176, 176, 176))
        .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(195, 195, 195)
                    .addComponent(chooseCust)
                    .addGap(18, 18, 18)
                    .addComponent(chooseProd))
                .addGroup(layout.createSequentialGroup()
                    .addGap(32, 32, 32)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 510, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(label4, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(4, 4, 4)
                                    .addComponent(input4, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(4, 4, 4)
                                    .addComponent(input1, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(label5)
                                    .addGap(18, 18, 18)
                                    .addComponent(range2, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(label2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(4, 4, 4)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(input2, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(input3, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGap(60, 60, 60)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(find)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(create, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(findRange, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(findAll, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(cnt, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(closeApp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
            .addContainerGap(32, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(title)
            .addGap(7, 7, 7)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(chooseProd)
                .addComponent(chooseCust))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE)
            .addGap(18, 18, 18)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(label1)
                        .addComponent(input1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(label5)
                        .addComponent(range2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(8, 8, 8)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(input2, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)
                        .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(8, 8, 8)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(input3, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(8, 8, 8)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(label4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(input4, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(create, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(find, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(findAll, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(findRange, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(closeApp, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cnt, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(0, 0, Short.MAX_VALUE)))
            .addGap(28, 28, 28))
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void allCustomers() {
        
        display.setText( "" ); // clear the textarea before reading in table
        
        // connecting to service on localhost (could be any URL with the Web Service deployed)        
        CustomerService cs = new CustomerService_Service().getCustomerServicePort();

        // header for Customer table
        display.setText( "Customers\nID\tName\t\tLogin\tPassword\n\n" );
        for( Customer cst : cs.findAll() ) { // prints a table of all customers in the database table

            // could just use the field calls in the output string, but this makes a formatted string easier to read 
            int crID = cst.getId();
            String nm = cst.getName();
            String lgn = cst.getLogin();
            String pw = cst.getPassword();

            // format output into a table
            String cConsole = String.format(
                "%-10d\t%-20s\t%-14s\t%-15s", crID, nm, lgn, pw );
            display.append( cConsole );
            display.append("\n"); // line space             
        } // end for loop
        
        // take out the garbage
        Runtime emptyIt = Runtime.getRuntime();
        emptyIt.gc();
    } // end helper method allCustomers
    
    private void allProducts() {
        
        display.setText( "" ); // clear the textarea before reading in table
        
        // connecting to service on localhost (could be any URL with the Web Service deployed)
        ProductServices ps = new ProductServices_Service().getProductServicesPort(); 

        // header for Product table
        String id = "ID";
        String nm = "Name";
        String des = "Description";
        String prce = "Price";
        String pHeader = String.format( "Products\n%-10s\t%-36s%-14s\t%-14s\n\n", 
            id, nm, des, prce );
        display.setText( pHeader );
        
        for( Product prod : ps.findAll() ) { //  the findAll() initiates a SOAP data transfer     
                    
            int pID = prod.getId();
            String nam = prod.getName();
            String desc = prod.getDescription();
            float pric = prod.getPrice();

            // format output into a table
            String pConsole = String.format(                        
                "%-10d\t%-20s%24s\t$%,14.2f", pID, nam, desc, pric );
            display.append( pConsole );
            display.append("\n"); // line space
        } // end for loop
        
        // take out the garbage
        Runtime emptyIt = Runtime.getRuntime();
        emptyIt.gc();
    } // end helper method allProducts
    
    private void closeAppActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeAppActionPerformed
        System.exit( 0 );
    }//GEN-LAST:event_closeAppActionPerformed
    
    private void chooseCustActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseCustActionPerformed
        
        label1.setText( "Customer ID:" ); // labels set by "Customer" button pressed
        label2.setText( "Name:" );
        label3.setText( "Login:" );
        label4.setText( "Password:" );
        label5.setText( "Range 2:" );
        
        display.setText( "" );
        input1.setText( "" ); // clear the textarea
        input2.setText( "" );
        input3.setText( "" );
        input4.setText( "" );
        range2.setText( "" );
                    
        objectIs = "custs"; // set a flag for use in handlers        
    }//GEN-LAST:event_chooseCustActionPerformed

    private void chooseProdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseProdActionPerformed
        
        label1.setText( "Product ID:" ); // labels set by "Product" button pressed
        label2.setText( "Name:" );
        label3.setText( "Description:" );
        label4.setText( "Price:" );
        label5.setText( "Range 2:" );
        
        display.setText( "" ); // clear the textarea and all textfields
        input1.setText( "" ); 
        input2.setText( "" );
        input3.setText( "" );
        input4.setText( "" );
        range2.setText( "" );
        
        objectIs = "prods"; // set a flag for use in handlers        
    }//GEN-LAST:event_chooseProdActionPerformed

    private void findActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findActionPerformed
        display.setText( "" ); // clear the text area before adding new list 
        
        switch( objectIs ) {
            
            case "custs": 
                
                ciD = Integer.parseInt( input1.getText() );
                
                try {
                    CustomerService nc = new CustomerService_Service().getCustomerServicePort(); 

                    Customer cst = nc.find( ciD ); // find the customer in the object array, by id

                    int crID = cst.getId(); // assign the object values, just to keep the output string readable            
                    String nm = cst.getName();
                    String lgn = cst.getLogin();
                    String pw = cst.getPassword();

                    String cConsole = String.format( // print out the object formatted  for columns
                        "Customers\nID\tName\t\tLogin\tPassword\n%-10d\t"
                        + "%-20s\t%-10s\t%-15s\n", crID, nm, lgn, pw );
                    display.setText( cConsole );                
                } catch ( NumberFormatException nfExcept ) {

                    System.out.println( nfExcept.toString() );
                    display.append( 
                        "Please enter an existing ID number and try again" );             
                }      
            break;
            
            case "prods": 
                
                piD = Integer.parseInt( input1.getText() );                
            
                try {
                    ProductServices ps = new ProductServices_Service().getProductServicesPort();

                    Product prd = ps.find( piD ); // find the product in the object array, by id   

                    int prID = prd.getId(); // assign the object values, just to keep the output string readable            
                    String nm = prd.getName();
                    String dsc = prd.getDescription();
                    float pric = prd.getPrice();            

                    // format output
                    String pConsole = String.format( 
                        "Products\nID\tName\t Description\t\tPrice\n%-10d\t"
                        + "%-20s %-32s\t$ %,10.2f\n", prID, nm, dsc, pric );
                    display.setText( pConsole );

                } catch ( NumberFormatException nfExcept ) {

                    System.out.println( nfExcept.toString() );
                    display.append( 
                        "Please enter an existing ID number and try again" );             
                }             
            break;
                
            default:
                JOptionPane.showMessageDialog(
                    null, "Please fill in an ID to Find." );
            
        } // end switch for find products or customers  
        
        input1.setText( "" );
        input2.setText( "" );
        input3.setText( "" );
        input4.setText( "" );
        range2.setText( "" ); 
        
        // take out the garbage
        Runtime emptyIt = Runtime.getRuntime();
        emptyIt.gc();
    }//GEN-LAST:event_findActionPerformed

    private void findAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findAllActionPerformed
        
        display.setText( "" ); // clear the text area before adding new list     
        
        input1.setText( "" ); // clear the textarea before displaying new find all results
        input2.setText( "" );
        input3.setText( "" );
        input4.setText( "" );
        range2.setText( "" );
        
        switch( objectIs ) {
            
            case "custs": {
                
                allCustomers();       
            }
            break;
                
            case "prods": {
                
                allProducts();                  
            }
            break;
                
            default:
                display.append( "error reading in database table" );                
        }         
    }//GEN-LAST:event_findAllActionPerformed

    private void findRangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findRangeActionPerformed
        
        switch( objectIs ) {
            
            case "custs": {
                
                display.setText( "" ); // clear the textarea before reading in table
                c1iD = Integer.parseInt( input1.getText() );
                c2iD = Integer.parseInt( range2.getText() );
                
                CustomerService nc = new CustomerService_Service().getCustomerServicePort(); 
                
                // create a sublist of customers from index c1iD to c2iD
                crange = nc.findAll().subList( c1iD - 1, c2iD );
        
                // print out a header for the customer table output
                display.setText( "Customers\nID\tName\t\tLogin\tPassword\n\n" );
        
                // iterate over the sublist of customer objects: crange, and print them out 
                for ( Iterator< Customer > it = crange.iterator(); it.hasNext(); ) {
            
                    Customer ct = it.next(); // assign the next customer object

                    int crID = ct.getId(); // assign the object values, just to keep the output string readable            
                    String nm = ct.getName();
                    String lgn = ct.getLogin();
                    String pw = ct.getPassword();

                    String cConsole = String.format( // print out the object formatted  for columns
                        "%-10d\t%-20s\t%-10s\t%-15s\n", crID, nm, lgn, pw );
                    display.append( cConsole );
                }
                display.append( "\n" );
                crange.clear(); // clear the List so it doesn't get extended every time the method is run
            }
            break;
            
            case "prods": {
                
                display.setText( "" ); // clear the textarea before reading in table
                p1iD = Integer.parseInt( input1.getText() );
                p2iD = Integer.parseInt( range2.getText() );
                
                ProductServices ps = new ProductServices_Service().getProductServicesPort();       
                
                // create a sublist of products from index p1iD to p2iD
                prange = ps.findAll().subList( p1iD - 1, p2iD );
        
                // header for Product table
                String id = "ID";
                String nm = "Name";
                String des = "Description";
                String prce = "Price";
                String pHeader = String.format( "Products\n%-10s\t%-36s%-14s\t%-14s\n\n", 
                    id, nm, des, prce );
                display.setText( pHeader );
        
                // iterate over the sublist of product objects: crange and print them out 
                for ( Iterator< Product > it = prange.iterator(); it.hasNext(); ) {
            
                    Product prd = it.next(); // assign the next customer object

                    int prID = prd.getId(); // assign the object values, just to keep the output string readable            
                    String nam = prd.getName();
                    String dsc = prd.getDescription();
                    float pric = prd.getPrice();

                    // format output into a table
                    String pConsole = String.format( 
                        "%-10d\t%-20s%24s\t$%,16.2f\n", prID, nam, dsc, pric );
                    display.append( pConsole );
                }
        
                display.append( "\n" );
                prange.clear(); // clear the List so it doesn't get extended every time the method is run
            }
            break;
            
            default:
                display.append( "Error reading range.");
        }
                
        input1.setText( "" ); // clear the textarea before displaying new find all results
        input2.setText( "" );
        input3.setText( "" );
        input4.setText( "" );
        range2.setText( "" ); 
        
        // take out the garbage
        Runtime emptyIt = Runtime.getRuntime();
        emptyIt.gc();
    }//GEN-LAST:event_findRangeActionPerformed

    private void createActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createActionPerformed
        
        display.setText( "" ); // clear the textarea before reading in table       
         
        switch( objectIs ) {
            
            case "custs": {
                
                ciD = Integer.parseInt( input1.getText() );
                String cnme = input2.getText();
                String clgin = input3.getText();
                String cssWrd = input4.getText();
                range2.setText( "" );
                
                CustomerService nc = new 
                    CustomerService_Service().getCustomerServicePort();
        
                Customer cst = new Customer(); // create a customer object for assigning values       

                cst.setId( ciD ); // assign the values for the customer
                cst.setLogin( clgin );
                cst.setName( cnme );
                cst.setPassword( cssWrd );

                nc.create( cst ); // use the web service to create a new customer 
                display.append( "\n" );
                
                allCustomers();
            }
            break;
            
            case "prods": {
                
                piD = Integer.parseInt( input1.getText() );
                String pnme = input2.getText();
                String pdesc = input3.getText();
                Float prc = Float.parseFloat( input4.getText() );                
                
                ProductServices ps = new ProductServices_Service().getProductServicesPort();
        
                Product prod = new Product();
                prod.setId( piD );        
                prod.setName( pnme );
                prod.setDescription( pdesc );
                prod.setPrice( prc );
        
                ps.create( prod ); 
        
                //allProducts();
                display.append( "\n" );
                
                allProducts();
            }
            break;
            
            default:
                display.setText( "Failed to create new object." );
        } // end switch
                
        input1.setText( "" ); // clear the textarea before displaying new find all results
        input2.setText( "" );
        input3.setText( "" );
        input4.setText( "" );
        range2.setText( "" );  
    }//GEN-LAST:event_createActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        
        display.setText( "" ); // clear the textarea before reading in table 
        
        switch( objectIs ) {
            
            case "custs": {
                
                ciD = Integer.parseInt( input1.getText() );
                String cnme = input2.getText();
                String clgin = input3.getText();
                String cssWrd = input4.getText();
                range2.setText( "" );
                
                CustomerService nc = new CustomerService_Service().getCustomerServicePort();
        
                Customer cst = nc.find( ciD ); // find the customer in the object array, by id   
        
                // if the user doesn't change a value, use the current value 
                if( cnme.equals( "" ) )
                    cnme = cst.getName();

                if( clgin.equals( "" ) )
                    clgin = cst.getLogin();

                if( cssWrd.equals( "" ) ) 
                    cssWrd = cst.getPassword();      

                cst.setId( ciD ); // assign the values of an existing customer        
                cst.setName( cnme );
                cst.setLogin( clgin );        
                cst.setPassword( cssWrd );

                nc.edit( cst ); // use the web service to update the customer in the database  
                
                allCustomers();
            }
            break;
            
            case "prods": {                
                
                piD = Integer.parseInt( input1.getText() );
                String pnme = input2.getText();
                String pdesc = input3.getText();
                 
                range2.setText( "" );
                
                ProductServices ps = new 
                    ProductServices_Service().getProductServicesPort();
        
                Product prd = ps.find( piD ); // find the customer in the object array, by id   

                // if the user hits enter without inputting a value, use the current, stored value 
                if( pnme.equals( "" ) )
                    pnme = prd.getName();

                if( pdesc.equals( "" ) )
                    pdesc = prd.getDescription();        

                if( input4.getText().equals( "" ) )
                    prc = prd.getPrice();      
                else
                    prc = Float.parseFloat( input4.getText() );        

                prd.setId( piD ); // assign the values of an existing product
                prd.setDescription( pdesc );
                prd.setName( pnme );
                prd.setPrice( prc );

                ps.edit( prd ); // use the web service to update the product in the database 
                
                allProducts();
            }
            break;
            
            default:
                display.setText( "Failed to create new object." );
        } // end switch
                
        input1.setText( "" ); // clear the textfields
        input2.setText( "" );
        input3.setText( "" );
        input4.setText( "" );
        range2.setText( "" );  
    }//GEN-LAST:event_updateActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        
        display.setText( "" ); // clear the textarea before reading in table 
        
        switch( objectIs ) {
            
            case "custs": {
                
                ciD = Integer.parseInt( input1.getText() );
                
                CustomerService nc = new CustomerService_Service().getCustomerServicePort();        
        
                Customer cst = nc.find( ciD ); // find the customer in the object array, by id
        
                nc.remove( cst ); // delete the customer from the table   
                
                allCustomers();
            }
            break;
            
            case "prods": {
                
                piD = Integer.parseInt( input1.getText() );
                
                ProductServices ps = new ProductServices_Service().getProductServicesPort();           
        
                Product prd = ps.find( piD ); // find the product in the object array, by id       
        
                ps.remove( prd ); // delete the customer from the table    
                
                allProducts();
            }
            break;
            
            default:
                display.setText( "Failed to delete object." );
        } // end switch
                
        input1.setText( "" ); // clear the textfields
        input2.setText( "" );
        input3.setText( "" );
        input4.setText( "" );
        range2.setText( "" );  
    }//GEN-LAST:event_deleteActionPerformed

    private void cntActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cntActionPerformed
        
        switch( objectIs ) {
            
            case "custs": {
                
               CustomerService nc = new CustomerService_Service().getCustomerServicePort(); 
        
                int ccnt = nc.count(); // return the number of customers in the database
        
                display.setText( "Customer count: " 
                    + String.valueOf( ccnt ) + "\n");      
            }
            break;
                
            case "prods": {
                
                ProductServices ps = new ProductServices_Service().getProductServicesPort();
        
                int pcnt = ps.count(); // return the # of products in the database
        
                display.setText( "Product count: " 
                    + String.valueOf( pcnt ) + "\n" );
            }
            break;
                
            default:
                display.append( "error counting database elements" );                
        } // end switch
    }//GEN-LAST:event_cntActionPerformed

    /**
     * @param args the command line arguments
     */
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TestClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TestClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TestClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TestClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>              
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                // input4 was cutting off the bottoms of letters, by palette default, so…
                UIManager.getLookAndFeelDefaults().put(
                        "input4.setMargin",new java.awt.Insets(0, 2, 0, 2));
                
                new TestClientGUI().setVisible(true);
            }
        });
        
        // the lambda version of the Runnable interface: less readable, but better efficiency - for production
        // <editor-fold>
        //java.awt.EventQueue.invokeLater(() -> {
            // input4 was cutting off the bottoms of letters, by palette default, so…
        //    UIManager.getLookAndFeelDefaults().put(
        //            "input4.setMargin",new java.awt.Insets(0, 2, 0, 2));
            
        //    new TestClientGUI().setVisible(true);
        //});
        // </editor-fold>
    } // end main method    
      
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton chooseCust;
    private javax.swing.JButton chooseProd;
    private javax.swing.JButton closeApp;
    private javax.swing.JButton cnt;
    private javax.swing.JButton create;
    private javax.swing.JButton delete;
    private javax.swing.JTextArea display;
    private javax.swing.JButton find;
    private javax.swing.JButton findAll;
    private javax.swing.JButton findRange;
    private javax.swing.JTextField input1;
    private javax.swing.JTextField input2;
    private javax.swing.JTextField input3;
    private javax.swing.JTextField input4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel label1;
    private javax.swing.JLabel label2;
    private javax.swing.JLabel label3;
    private javax.swing.JLabel label4;
    private javax.swing.JLabel label5;
    private javax.swing.JTextField range2;
    private javax.swing.JLabel title;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables
} // end class TestClientGUI
